#!/usr/bin/env escript

%% -----------------------------------------------------------------------------
%%
%% Hamcrest Erlang.
%%
%% Copyright (c) 2010 Tim Watson (watson.timothy@gmail.com)
%%
%% Permission is hereby granted, free of charge, to any person obtaining a copy
%% of this software and associated documentation files (the "Software"), to deal
%% in the Software without restriction, including without limitation the rights
%% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
%% copies of the Software, and to permit persons to whom the Software is
%% furnished to do so, subject to the following conditions:
%%
%% The above copyright notice and this permission notice shall be included in
%% all copies or substantial portions of the Software.
%%
%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
%% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
%% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
%% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
%% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
%% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
%% THE SOFTWARE.
%% -----------------------------------------------------------------------------
%% @author Tim Watson <watson.timothy@gmail.com>
%% @copyright 2010 Tim Watson.
%%
%% Generates hamcrest.hrl header file during build process.
%% -----------------------------------------------------------------------------

main(_) ->
    code:add_patha("ebin"),
	code:add_path("deps/erlydtl/ebin"),
	%% io:format("CODE:WHICH = ~p~n", [code:which(erlydtl)]),
	%% erlang:display(os:getenv("ERL_LIBS")),
    Exports = lists:filter(
        fun({F,_}) -> F /= module_info end,
        hamcrest_matchers:module_info(exports)),
    Imports = [ io_lib:format("~s/~p", [F,A]) || {F, A} <- Exports ],
    Expr = lists:flatten(
        lists:foldl(fun(In, Acc) -> lists:concat([In, ", ", Acc]) end, "", Imports)),
    ImportList = string:substr(Expr, 1, length(Expr) - 2),
	{ok, PWD} = file:get_cwd(),
	HdrTemplate = filename:join(PWD, "priv/build/templates/hamcrest.hrl.src"),
    ok = erlydtl:compile(HdrTemplate, header_template),
    {ok, Res} = header_template:render([{imports, ImportList}]),
    Dest = filename:absname(filename:join(["include", "hamcrest.hrl"])),
    case file:write_file(Dest, list_to_binary(Res)) of
        ok -> io:format("Header file(s) generated.~n", []);
        {error, WriteError} ->
            io:format("Failed to write ~p: ~p~n", [Dest, WriteError]),
            halt(1)
    end.
